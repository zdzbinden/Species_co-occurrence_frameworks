install.packages("Matrix")
#Making Matrix Q1
rates1<-c(0, 0.2, 0.4, 0.2, 0.3, 0, 0.3, 0.9, 0.6, 0.3, 0, 0.3, 0.2, 0.6, 0.2, 0)
Q1<- matrix(rates1, 4,4)
rownames(Q1) <- colnames(Q1) <- c("A", "C", "G", "T")
diag(Q1) <- -rowSums(Q1)
#Calculating Probs based on Q1
Jer.DNA1 <- expm(Q1*0.68)%*%c(1,0,0,0)
Hipster.McGee.DNA1 <- expm(Q1*0.46)%*%c(0,1,0,0)
combined.probs1 <- Jer.DNA1 * Hipster.McGee.DNA1
combined.probs1
sum(combined.probs1)
library("Matrix", lib.loc="~/R/win-library/3.4")
#Making Matrix Q1
rates1<-c(0, 0.2, 0.4, 0.2, 0.3, 0, 0.3, 0.9, 0.6, 0.3, 0, 0.3, 0.2, 0.6, 0.2, 0)
Q1<- matrix(rates1, 4,4)
rownames(Q1) <- colnames(Q1) <- c("A", "C", "G", "T")
diag(Q1) <- -rowSums(Q1)
#Calculating Probs based on Q1
Jer.DNA1 <- expm(Q1*0.68)%*%c(1,0,0,0)
Hipster.McGee.DNA1 <- expm(Q1*0.46)%*%c(0,1,0,0)
combined.probs1 <- Jer.DNA1 * Hipster.McGee.DNA1
combined.probs1
sum(combined.probs1)
View(Q1)
Jer.DNA1
#Making Matrix Q1
rates1<-c(0, 0.2, 0.4, 0.2, 0.3, 0, 0.3, 0.9, 0.6, 0.3, 0, 0.3, 0.2, 0.6, 0.2, 0)
Q1<- matrix(rates1, 4,4)
rownames(Q1) <- colnames(Q1) <- c("A", "C", "G", "T")
diag(Q1) <- -rowSums(Q1)
#Calculating Probs based on Q1
Jer.DNA1 <- expm(Q1*0.68)%*%c(1,0,0,0)
Hipster.McGee.DNA1 <- expm(Q1*0.46)%*%c(0,1,0,0)
combined.probs1 <- Jer.DNA1 * Hipster.McGee.DNA1
combined.probs1
sum(combined.probs1)
#Making Matrix Q2
rates2<-c(0, 1.2, 0.4, 0.2, 0.3, 0, 0.3, 0.9, 0.6, 0.3, 0, 0.3, 0.2, 0.6, 0.2, 0)
Q2<- matrix(rates2, 4,4)
rownames(Q2) <- colnames(Q2) <- c("A", "C", "G", "T")
diag(Q2) <- -rowSums(Q2)
#Calculating Probs based on Q2
Jer.DNA2 <- expm(Q2*0.68)%*%c(1,0,0,0)
Hipster.McGee.DNA2 <- expm(Q2*0.46)%*%c(0,1,0,0)
combined.probs2 <- Jer.DNA2 * Hipster.McGee.DNA2
combined.probs2
sum(combined.probs2)
View(Q1)
View(Q2)
rates<-c(0, 0.2, 0.4, 0.1, 0.2, 0, 0.09, 1.0, 0.4, 0.3, 0, 0.01, 0.1, 0.8, 0.01, 0)
Q<-matrix(rates, 4, 4)
Q
rownames(Q) <- colnames(Q)<- c("A", "C", "G", "T")
Q
diag(Q)<-rowSums(Q)
Q
Q<-matrix(rates, 4, 4)
rownames(Q) <- colnames(Q)<- c("A", "C", "G", "T")
diag(Q)<- -rowSums(Q)
Q
library(Matrix)
left<- expam(Q*0.20)%*%c(0,0,0,1)
left<- expm(Q*0.20)%*%c(0,0,0,1)
right<- expm(Q*0.20)%*%c(1,0,0,0)
left
right
combined.probs <- left * right
combined.probs
left<- expm(Q*0.20)%*%c(0,1,0,0)
right<- expm(Q*0.20)%*%c(0,0,0,1)
combined.probs <- left * right
combined.probs
left<- expm(Q*0.20)%*%c(0,0,1,0)
right<- expm(Q*0.20)%*%c(0.0007,0.099,0.00006,0.129)
combined.probs <- left * right
combined.probs
left<- expm(Q*0.20)%*%c(0.017,0.005,0.002,0.016)
right<- expm(Q*0.20)%*%c(0.0005,0.005,0.002,0.009)
combined.probs <- left * right
combined.probs
sum(combined.probs)
left<- expm(Q*0.20)%*%c(0,0,0,1)
right<- expm(Q*0.20)%*%c(1,0,0,0)
combined.probs <- left * right
combined.probs
sum(combined.probs)
left<- expm(Q*0.20)%*%c(0,1,0,0)
right<- expm(Q*0.20)%*%c(0,0,0,1)
combined.probs <- left * right
combined.probs
sum(combined.probs)
left<- expm(Q*0.20)%*%c(0,0,1,0)
right<- expm(Q*0.20)%*%c(0.0007, 0.099, 0.00006, 0.129)
combined.probs <- left * right
combined.probs
sum(combined.probs)
left<- expm(Q*0.20)%*%c(0.017, 0.005, 0.0002, 0.016)
right<- expm(Q*0.20)%*%c(0.0005, 0.005, 0.002, 0.0009)
combined.probs <- left * right
combined.probs
combined.probs
sum(combined.probs)
rates <- c(0, 0.08, 0.10, 0.06, 0.04, 0, 0.03, 0, 0.09, 0.03, 0, 0.07, 0.06, 0.12, 0.12, 0)
Q <- matrix(rates, 4,4)
Q
diag(Q)<- -rowSums(Q)
Q
rownames(Q)<- colnames(Q)<- c("A", "C", "G", "T")
Q
library(ape)
library(MASS)
left <- expm(Q*0.20)%*%c(0,0,0,1)
library("Matrix", lib.loc="~/R/win-library/3.4")
left <- expm(Q*0.20)%*%c(0,0,0,1)
left
right <- expm(Q*0.20)%*%c(1,0,0,0)
right
combined.probs <- left * right
combined.probs
rates <- c(0, 0.2, 0.4, 0.1, 0.2, 0, 0.09, 1.0, 0.4, 0.3, 0, 0.01, 0.1, 0.8, 0.01, 0)
Q <- matrix(rates, 4,4)
Q
rownames(Q) <- colnames(Q) <- c("A", "C", "G", "T")
diag(Q) <- -rowSums(Q)
Q
left <- expm(Q*0.20)%*%c(0,0,0,1)
left
right <- expm(Q*0.20)%*%c(1,0,0,0)
right
combined.probs <- left * right
combined.probs
left <- expm(Q*0.20)%*%c(0,1,0,0)
left
right <- expm(Q*0.20)%*%c(0,0,0,1)
right
combined.probs <- left * right
combined.probs
left <- expm(Q*0.20)%*%c(0,0,1,0)
right <- expm(Q*0.20)%*%c(0.0007, 0.099, 0.00006, 0.129)
combined.probs <- left * right
combined.probs
left <- expm(Q*0.20)%*%c(0.017, 0.005, 0.0002, 0.016)
right <- expm(Q*0.20)%*%c(0.0005, 0.005, 0.002, 0.0009)
combined.probs <- left * right
combined.probs
sum(combined.probs)
log(sum(combined.probs))
probs <- sum(combined.probs)
probs
log(probs)
install.packages("OUwie")
library(ape)
library(phytools)
intall.packages("phytools")
install.packages("phytools")
library(ape)
library(phytools)
library(OUwie)
rphy <- rtree(n = 100, rooted = TRUE, br =1)
plot(rphy)
axisPhylo()
phy <- pbtree(b =1, d= 0, n = 50, scale = 50, extant.only = TRUE)
plot(phy)
axisPhylo()
trait1 <- fastBM(tree=phy, a=0, sig2=0.01)
trait2 <- fastBM(tree=phy, a=0, sig2=0.05)
boxplot(trait1, trait2, names=c("trait1", "trait2"))
lglims <- range(trait1, trait2)
contMap(tree=phy, x=trait1, lims=lglims)
trait3 <- fastBM(tree=phy, mu=0.1, a=0, sig2=0.03)
hist(trait3)
hist(trait3)
contMap(tree=phy, x=trait3)
ouwie.data <- data.frame(names(trait3), 1, as.numeric(trait3))
bm3 <- OUwie(phy=phy, data=ouwie.data, model="BM1")
bm3
library("ape", lib.loc="~/R/win-library/3.4")
library("phytools", lib.loc="~/R/win-library/3.4")
library("OUwie", lib.loc="~/R/win-library/3.4")
data(tworegime)
tree
vcv.data<-matrix(data=c(.5, 0.3, 0.3, 0.45), nrow=2, ncol=2, byrow=TRUE)
trait<-sim.corrs(tree, vcv.data, anc=c(17,3))
trait
par(mfcol=c(1,2))
contMap(tree, trait [,1])
contMap(tree, trait [,2], direction = "leftwards")
par(mfcol=c(1,1))
phylomorphospace(tree,trait)
pic.X<-pic(trait[,1], tree)
pic.Y<-pic(trait[,2], tree)
par(mfcol=c(1,2))
plot(trait[,1], trait[,2], pch=16, bty="n", col="gray")
nophylo<-lm(trait[,2]~trait[,1])
abline(nophylo)
plot(pic.X, pic.Y, pch=16, bty="n", col="gray")
phylo<-lm(trait[,2]~trait[,1]-1)
abline(h=0, lty=2)
abline(phylo)
par(mfcol=c(1,2))
> contMap(tree, trait [,1])
> contMap(tree, trait [,2], direction = "leftwards")
> par(mfcol=c(1,1))
> phylomorphospace(tree,trait)
> pic.X<-pic(trait[,1], tree)
> pic.Y<-pic(trait[,2], tree)
> par(mfcol=c(1,2))
> plot(trait[,1], trait[,2], pch=16, bty="n", col="gray")
> nophylo<-lm(trait[,2]~trait[,1])
> abline(nophylo)
> plot(pic.X, pic.Y, pch=16, bty="n", col="gray")
> phylo<-lm(trait[,2]~trait[,1]-1)
> abline(h=0, lty=2)
> abline(phylo)
pic.X<-pic(trait[,1], tree)
pic.Y<-pic(trait[,2], tree)
par(mfcol=c(1,2))
plot(trait[,1], trait[,2], pch=16, bty="n", col="gray")
abline(nophylo)
plot(pic.X, pic.Y, pch=16, bty="n", col="gray")
abline(h=0, lty=2)
abline(phylo)
data(tworegime)
select.reg<-character(length(tree$node.label))
select.rg[tree$node.label == 1] <- "black"
select.reg[tree$node.label == 1] <- "black"
select.reg[tree$node.label == 2] <- "red"
plot(tree)
nodelabels(pch=21, bg=select.reg)
bm1 <- OUwie(tree, trait, model="BM1")
bm1
bms <- OUwie(tree, trait, model="BMS", root.station=FALSE)
bms
data(tworegime)
par(mfcol=c(1,1))
trait.vector<- trait[,3]
names(trait.vector) <- trait[,1]
contMap(tree, trait.vector)
ou1 <- OUwie(tree, trait, model="OU1")
ou1
oum <- OUwie(tree, trait, model="OUM")
oum
oumv <- OUwie(tree, trait, model="OUMV")
oumv
library(ape)
install.packages("TreeSim")
library(TreeSim)
my.tree <- TreeSim::sim.bd.taxa(n=300, numbsim = 1, lambda = 0.1, mu=0) [[1]]
my.tree
plot(my.tree)
my.tree <- TreeSim::sim.bd.taxa(n=300, numbsim = 1, lambda = 0.1, mu=0) [[1]]
plot(my.tree)
ape::ltt.plot(my.tree)
ape::ltt.plot(my.tree, log="y")
ape::ltt.plot(my.tree, log="y")
yule.trees <- TreeSim::sim.bd.taxa(n=300, numbsim=10, lambda=0.1, mu=0, complete=FALSE)
ape::mltt.plot(yule.trees, log="y", legend=FALSE)
bd.trees <- TreeSim::sim.bd.taxa(n=300, numbsim=10, lambda=1, mu=0.9, complete=FALSE)
ape::mltt.plot(bd.trees, log="y", legend=FALSE)
depth.range <- range(unlist(lapply(yule.trees,ape::branching.times)), unlist(lapply(bd.trees,ape::branching.max.depth <- sum(abs(depth.range)) #ape rescales depths
plot(x=c(0, -1*max.depth), y=c(1, ape::Ntip(yule.trees[[1]])), log="y", type="n", bty="n", xlab="Time", colors=c(rgb(1,0,0,0.5), rgb(0, 0, 0, 0.5))
list.of.both <- list(bd.trees, yule.trees)
for (i in sequence(2)) {
tree.list <- list.of.both[[i]]
for (j in sequence(length(tree.list))) {
ape::ltt.lines(tree.list[[j]], col=colors[[i]])
}
}
legend("topleft", legend=c("Birth Death", "Yule"), fill=colors)
depth.range <- range(unlist(lapply(yule.trees,ape::branching.times)), unlist(lapply(bd.trees,ape::branching.times)))
max.depth <- sum(abs(depth.range)) #ape rescales depths
plot(x=c(0, -1*max.depth), y=c(1, ape::Ntip(yule.trees[[1]])), log="y", type="n", bty="n", xlab="Time", ylab="N")
colors=c(rgb(1,0,0,0.5), rgb(0, 0, 0, 0.5))
list.of.both <- list(bd.trees, yule.trees)
for (i in sequence(2)) {
tree.list <- list.of.both[[i]]
for (j in sequence(length(tree.list))) {
ape::ltt.lines(tree.list[[j]], col=colors[[i]])
}
}
legend("topleft", legend=c("Birth Death", "Yule"), fill=colors)
net.div.yule <- c()
for(i in 1:10){ net.div.yule <- c(net.div.yule, birthdeath(yule.trees [[i]]) $par[2])}
mean(net.div.yule)
net.div.bd <- c()
for(i in 1:10){net.div.bd <- c(net.div.yule, birthdeath(bd.trees [[i]]) $par[2])}
mean(net.div.bd)
install.packages(rgdal)
install.packages("rgdal")
# set working directory to "WTD_spatial_analysis"
# Read in data file | Make sure data is saved as a .csv (comma separated file)
raw.data <- read.csv("AR_Tess10km_final.csv")
# Organizing the data to our needs
####
####   IMPORTANT! The following steps assume the column structure in the example data used
####
# remove unecessary information including "FID" and "Grid ID"
data <-raw.data[,c(-1,-2)]
# create a table with only the X, Y coordinate data
coordinates.data <-as.data.frame(data[,c(1,2)])
density.data <-as.data.frame(data[,24])
#######################
#  RESPONES VARIABLES
#######################
# Extract separate tables for Response Variables/Parameters of Interest
# create logM data table
logM <-as.data.frame(data[,3])
# create logQ data table
logQ <-as.data.frame(data[,4])
# create data table with all cluster probabilities
k.probs <-as.data.frame(data[,c(5:13)])
# create data table with dominant k values
dominant.k <-as.data.frame(data[,14])
#######################
# EXPLANATORY VARIABLES
#######################
# Extract all other variables into a data frame
exp.vars.raw <-data[,c(-1:-14)]
# need to transform categorical character variables into binary "dummy" variables
install.packages("fastDummies")
library("fastDummies")
exp.vars.dummy <- dummy_columns(exp.vars.raw)
# removing original character variables
exp.vars.dummy <- exp.vars.dummy[,-4:-9]
exp.vars.dummy <- exp.vars.dummy[,-27:-29]
####################
# Distance Matrix
####################
install.packages("vegan")
library("vegan")
# creates a rectangular matrix with all pairwise distances (euclidean) between hexagons
geo.distance.matrix <- vegdist(coordinates.data, method = "euclidean")
#####################
# Create spatial functions/eigen vectors using dbMEM
#####################
install.packages("adespatial")
install.packages("ade4")
install.packages("adegraphics")
install.packages("installr")
library(installr)
updateR()
#        PACKAGES REQUIRED:
install.packages("fastDummies")
install.packages("robustHD")
install.packages("usdm")
install.packages("spmoran")
install.packages("vegan")
install.packages("ggplot2")
install.packages("ggridges")
install.packages("grid")
install.packages("lattice")
install.packages("gridExtra")
library("fishtree")
library("phytools")
library("caper")
library("picante")
library("usdm")
help("multiPhylosignal")
help("match.phylo.data")
install.packages("mapPies")
devtools::install_github("wpeterman/ResistanceGA", build_vignettes+TRUE)
devtools::install_github("wpeterman/ResistanceGA",
build_vignettes = TRUE)
library(devtools)
library(devtools)
install.packages(c("data.table", "deldir", "digest", "fields", "haven", "Hmisc", "openxlsx", "purrr", "quantreg", "Rcpp", "rlang", "RNeXML", "roxygen2", "scatterpie", "sp", "spam", "spdep", "units", "xfun"))
library(devtools)
if(!("devtools" %in% list.files(.libPaths()))) {
install.packages("devtools", repo = "http://cran.rstudio.com", dep = TRUE)
}
remove.packages("devtools", lib="~/R/win-library/3.6")
install.packages("devtools")
library(devtools)
install.packages("ResistanceGA")
install.packages("devtools")
install.packages(Rtools)
install.packages("Rtools")
install.packages(c("deldir", "haven", "purrr", "Rcpp", "rlang", "roxygen2", "sp", "spdep"))
remove.packages("devtools", lib="~/R/win-library/3.6")
install.packages("devtools")
library("devtools")
devtools::install_github()
install.packages("rlang")
install.packages("rlang")
remove.packages("rlang", lib="~/R/win-library/3.6")
install.packages("rlang")
library("devtools")
install_github("wpeterman/ResistanceGA", build_vignettes = TRUE)
remove.packages("Rcpp", lib="~/R/win-library/3.6")
install_github("wpeterman/ResistanceGA", build_vignettes = TRUE)
install_github("wpeterman/ResistanceGA", build_vignettes = TRUE)
install.packages("Rcpp")
install.packages("Rcpp")
install_github("wpeterman/ResistanceGA", build_vignettes = TRUE)
library("devtools")
install_github("wpeterman/ResistanceGA", build_vignettes = TRUE)
install.packages("Rtools")
install_github("wpeterman/ResistanceGA")
library("devtools")
install.packages("usethis")
install.packages("Rcpp")
library("devtools")
install_github("wpeterman/ResistanceGA")
library("devtools")
install.packages("Rcpp")
library("Rcpp")
citation()
citation(adespatial)
citation("adespatial")
citation("Rmisc")
citation("stringr")
setwd("C:/Users/zbind/Desktop/co-occur_MS/co-occur_workdir")
###############################
###      1.0                  #
###      Import Data          #
###############################
## read in data file
## example file contains Site Names, Geographic Coordinates, Environmental Data, and Species Presences/Absences
data <- read.csv("DATA.csv", header = T, row.names=1, sep =",")
### Example data contains data from TWO sampling periods, choose which period to analyze:
##  USE *EITHER* 1974  - OR - 2014 variables
###############################
###           1974          ###
###############################
data1974 <- data[1:33,]
species<- data1974[,-c(1:11)]
env <- data1974[,c(3:11)]
coords <- data1974[,c(1:2)]
###############################
##        SKIP STEP 1.1 if you wish to use Geographic Coordinates rather than distance matrix
################################################################################################################################
### 1.1: Extension for Fluvial Analysis -- distance-based Moran's eigenvector maps (dbMEM)                                     #
### OPTIONAL STEP: Read in fluvial distance matrix and decompose into eigenvectors to represent space in mutliple dimensions   #
## Required data: distance matrix representing pairwise fluvial/network distance between all samples sites                     #
## Such a matrix can be acquired by using the Network Analyst Tool in ArcGis                                                   #
## Tutorial: http://www.biology.ualberta.ca/facilities/GIS/uploads/instructions/AVRiverDistanceMatrix9.pdf                     #
## **If you wish to use LAT and LONG rather than fluvial distance, skip to step 2.0                                            #
################################################################################################################################
# load in fluvial distance matrix
riv.dist <- read.table("fluvial_dist.csv",header=T,sep=",",row.names=1)
# set row and column names
row.names(riv.dist) <- row.names(species)
colnames(riv.dist) <- row.names(riv.dist)
riv.dist <- as.dist(riv.dist, diag = TRUE, upper = TRUE)
### dbMEM method with adespatial
library(adespatial)
### Spatial eigenfunction analysis of fluvial distance matrix to generate eigenvectors representing "river space"
dbmem1 <- dbmem(riv.dist, thresh = NULL, MEM.autocor = "positive", store.listw = TRUE, silent = FALSE)
# replace coords object (default includes X&Y/LONG&LAT) with the spatial eigenvectors
coords <- dbmem1
row.names(coords) <- row.names(species)
View(coords)
############################
### Reading spatial data ###
############################
setwd("C:/Users/zbind/Desktop/shelf/Projects/Pigg Comparison/Manuscripts/co-occur_MS/co-occur_workdir/gis_data/")
# reading HydroRIVERS shapefile into R (modified this file in ArcGIS)
library(raster)
hydroRiv <- shapefile("./rivers.shp", verbose=TRUE, warnPRJ=TRUE)
plot(hydroRiv) # check map looks OK
# reading fish collection site coordinates N=142 (this file was also projected in ArcGIS)
sites <- shapefile("./sites.shp")
points(sites) # check map looks OK
### snapping points to river lines ###
library(sf)
sites<-st_as_sf(sites)
hydroRiv <-st_as_sf(hydroRiv)
join<-st_join(sites, hydroRiv, st_nearest_feature,left=TRUE) # combined in situ ENV variables with hydroATLAS variables
join <-st_set_geometry(join, NULL) #325 vars
rm(sites)
View(join)
write.csv(join, "./DATA.csv")
